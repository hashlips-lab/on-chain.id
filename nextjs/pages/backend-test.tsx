import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.scss';
import {
  ConnectButton,
} from '@rainbow-me/rainbowkit';
import '@rainbow-me/rainbowkit/styles.css';
import { useAccount } from 'wagmi';
import { useOnChainIdContext } from '../scripts/OnChainIdContext';

const BackEndTest: NextPage = () => {
  const { isConnected } = useAccount();
  const [ walletIsConnected, setWalletIsConnected ] = useState(false);
  const [ providerAddress, setProviderAddress ] = useState('');
  const [ userAddress, setUserAddress ] = useState('');
  const [ userKey, setUserKey ] = useState('');
  const {
    noExpirationValue,
    privateData,
    refreshPrivateData,
    isPrivateDataRefreshing,
    allowedProviders,
    refreshAllowedProviders,
    areAllowedProvidersRefreshing,
    permissions,
    refreshPermissions,
    arePermissionsRefreshing,
    providerExpiration,
    refreshProviderExpiration,
    userData,
    refreshUserData
  } = useOnChainIdContext();

  useEffect(() => {
      setWalletIsConnected(isConnected);
  }, [ isConnected ]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Hello world!
        </h1>

        <ConnectButton />

        {walletIsConnected ? <>
          <hr className="mt-8 w-96 border"/>

          <h2 className="mt-4 text-xl font-bold">Private data:</h2>
          <button className="px-2 py-1 border rounded disabled:bg-red-800" onClick={() => refreshPrivateData()} disabled={isPrivateDataRefreshing}>Refresh</button>
          <ul className="my-4">
            {privateData.map((data, index) =>
              <li key={`private-data-${index}`} className="flex flex-col mb-4 p-2 border rounded">
                <strong>{data.data}</strong>
                <code className="text-xs">{data.key.getName()}</code>
              </li>
            )}
          </ul>

          <hr className="w-96 border"/>

          <h2 className="mt-4 text-xl font-bold">Allowed providers:</h2>
          <button className="px-2 py-1 border rounded disabled:bg-red-800" onClick={() => refreshAllowedProviders()} disabled={areAllowedProvidersRefreshing}>Refresh</button>
          <ul className="my-4">
            {allowedProviders.map((provider, index) =>
              <li key={`allowed-providers-${index}`} className="flex flex-col mb-4 p-2 border rounded">
                <code className="text-xs">{provider}</code> <button className="px-2 py-1 border rounded disabled:bg-red-800" onClick={() => refreshPermissions(provider)} disabled={arePermissionsRefreshing}>Show permissions</button>
              </li>
            )}
          </ul>

          <hr className="w-96 border" />

          {permissions.length > 0 && <>
            <h2 className="mt-4 text-xl font-bold">Permissions:</h2>
            <ul className="my-4">
              {permissions.map((permissionsEntry, index) =>
                <li key={`private-data-${index}`} className="flex flex-col mb-4 p-2 border rounded">
                  <strong>Access {permissionsEntry.canRead ? <span className="text-green-700">granted</span> : <span className="text-red-700">denied</span>}</strong>
                  <code className="text-xs">{permissionsEntry.key.getName()}</code>
                </li>
              )}
            </ul>
          </>}

          <hr className="w-96 border" />

          {noExpirationValue && <>
            <h2 className="mt-4 text-xl font-bold">No Expiration Value:</h2>
            <strong>{noExpirationValue.toNumber()}</strong>
          </>}

          <hr className="w-96 border" />

          <h2 className="mt-4 text-xl font-bold">Provider Expiration:</h2>
          <input className="border mt-1 mb-4 w-96 text-sm" type="text" placeholder='Provider address' onChange={(e) => setProviderAddress(e.target.value)} />
          <button className="px-2 py-1 border rounded" onClick={() => refreshProviderExpiration(providerAddress)}>Get expiration for provider</button>
          {providerExpiration && <strong>{providerExpiration.toNumber()}</strong>}

          <hr className="w-96 border" />

          <h2 className="mt-4 text-xl font-bold">Data:</h2>
          <input className="border mt-1 mb-4 w-96 text-sm" type="text" placeholder='User address' onChange={(e) => setUserAddress(e.target.value)} />
          <input className="border mt-1 mb-4 w-96 text-sm" type="text" placeholder='Key' onChange={(e) => setUserKey(e.target.value)} />
          <button className="px-2 py-1 border rounded" onClick={() => refreshUserData(userAddress, userKey)}>Get data</button>
          {userData && <strong>{userData}</strong>}

        </> : <>Please connect wallet</>}
      </main>
    </div>
  );
};

export default BackEndTest;
